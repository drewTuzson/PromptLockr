# REPLIT IMPLEMENTATION: Epic 6 Phase 4 - Final Polish & Production Readiness

## CONTEXT
You're implementing Phase 4 of Epic 6 for PromptLockr after successfully completing:
- **Phase 1**: Username system, avatars, sharing, profiles
- **Phase 2**: Mobile excellence, PWA, explore & discovery
- **Phase 3**: AI enhancement, collections, collaboration, analytics

## PHASE 4 OBJECTIVES
Complete Epic 6 with production polish, advanced features, monetization foundation, and enterprise-grade reliability.

## DATABASE SCHEMA UPDATES

```sql
-- Notification System
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL, -- 'like', 'follow', 'share', 'comment', 'mention', 'system'
  title VARCHAR(255) NOT NULL,
  message TEXT,
  data JSONB, -- Additional context data
  read_at TIMESTAMP,
  clicked_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_notifications_user_unread (user_id, read_at)
);

-- Subscription Tiers (Monetization Foundation)
CREATE TABLE subscription_tiers (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(50) NOT NULL,
  slug VARCHAR(50) UNIQUE NOT NULL,
  price_monthly INTEGER, -- in cents
  price_yearly INTEGER, -- in cents
  features JSONB NOT NULL, -- feature flags and limits
  max_prompts INTEGER,
  max_collections INTEGER,
  max_collaborators INTEGER,
  ai_enhancements_monthly INTEGER,
  priority_support BOOLEAN DEFAULT false,
  custom_branding BOOLEAN DEFAULT false,
  analytics_retention_days INTEGER DEFAULT 30,
  created_at TIMESTAMP DEFAULT NOW()
);

-- User Subscriptions
CREATE TABLE user_subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  tier_id UUID REFERENCES subscription_tiers(id),
  status VARCHAR(20) DEFAULT 'active', -- 'active', 'cancelled', 'expired', 'trial'
  current_period_start TIMESTAMP NOT NULL,
  current_period_end TIMESTAMP NOT NULL,
  cancel_at_period_end BOOLEAN DEFAULT false,
  stripe_customer_id VARCHAR(255),
  stripe_subscription_id VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id)
);

-- Usage Tracking
CREATE TABLE usage_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  metric_type VARCHAR(50) NOT NULL, -- 'prompts_created', 'ai_enhancements', 'storage_used'
  value INTEGER NOT NULL,
  period_start DATE NOT NULL,
  period_end DATE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, metric_type, period_start)
);

-- Search History & Suggestions
CREATE TABLE search_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  query TEXT NOT NULL,
  results_count INTEGER,
  clicked_result_id UUID,
  clicked_result_type VARCHAR(20), -- 'prompt', 'user', 'collection'
  created_at TIMESTAMP DEFAULT NOW()
);

-- Report & Moderation System
CREATE TABLE content_reports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  reporter_user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  content_type VARCHAR(20) NOT NULL, -- 'prompt', 'user', 'collection', 'comment'
  content_id UUID NOT NULL,
  reason VARCHAR(50) NOT NULL, -- 'spam', 'inappropriate', 'copyright', 'other'
  description TEXT,
  status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'reviewed', 'resolved', 'dismissed'
  moderator_id UUID REFERENCES users(id),
  moderator_notes TEXT,
  action_taken VARCHAR(50), -- 'removed', 'warned', 'banned', 'no_action'
  created_at TIMESTAMP DEFAULT NOW(),
  resolved_at TIMESTAMP
);

-- Activity Feed
CREATE TABLE activity_feed (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  actor_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  action VARCHAR(50) NOT NULL, -- 'created_prompt', 'liked', 'followed', 'shared'
  target_type VARCHAR(20), -- 'prompt', 'collection', 'user'
  target_id UUID,
  metadata JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_activity_feed_user (user_id, created_at DESC)
);

-- API Keys (for developer access)
CREATE TABLE api_keys (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL,
  key_hash VARCHAR(255) UNIQUE NOT NULL,
  last_four VARCHAR(4) NOT NULL,
  permissions JSONB DEFAULT '["read"]',
  rate_limit INTEGER DEFAULT 1000, -- requests per hour
  last_used_at TIMESTAMP,
  expires_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  revoked_at TIMESTAMP
);

-- Backups & Export Jobs
CREATE TABLE export_jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  export_type VARCHAR(20) NOT NULL, -- 'full', 'prompts', 'collections'
  format VARCHAR(10) NOT NULL, -- 'json', 'csv', 'markdown'
  status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'processing', 'completed', 'failed'
  file_url VARCHAR(500),
  file_size INTEGER,
  error_message TEXT,
  started_at TIMESTAMP,
  completed_at TIMESTAMP,
  expires_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);

-- System Health Metrics
CREATE TABLE system_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  metric_name VARCHAR(100) NOT NULL,
  value DECIMAL(10,2) NOT NULL,
  unit VARCHAR(20),
  timestamp TIMESTAMP DEFAULT NOW(),
  metadata JSONB,
  INDEX idx_system_metrics_time (metric_name, timestamp DESC)
);

-- Insert default subscription tiers
INSERT INTO subscription_tiers (name, slug, price_monthly, price_yearly, features, max_prompts, max_collections, max_collaborators, ai_enhancements_monthly, priority_support, custom_branding, analytics_retention_days) VALUES
('Free', 'free', 0, 0, '{"ads": true, "watermark": true}', 100, 5, 3, 10, false, false, 7),
('Pro', 'pro', 999, 9999, '{"ads": false, "watermark": false, "advanced_analytics": true}', 1000, 50, 10, 100, false, false, 90),
('Team', 'team', 2999, 29999, '{"ads": false, "watermark": false, "advanced_analytics": true, "team_collaboration": true}', 5000, 200, 50, 500, true, true, 365),
('Enterprise', 'enterprise', NULL, NULL, '{"all_features": true, "sso": true, "audit_logs": true}', NULL, NULL, NULL, NULL, true, true, NULL);

-- Add indexes for performance
CREATE INDEX idx_prompts_user_public ON prompts(user_id, is_public);
CREATE INDEX idx_prompts_trending ON prompts(like_count, view_count, created_at DESC);
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_collections_featured ON prompt_collections(is_featured, follower_count DESC);
```

## API ENDPOINTS

```typescript
// Notification System
app.get("/api/notifications", authMiddleware, async (req, res) => {
  const userId = req.user.id;
  const { limit = 20, offset = 0, unreadOnly = false } = req.query;

  const conditions = [eq(notifications.userId, userId)];
  if (unreadOnly) {
    conditions.push(isNull(notifications.readAt));
  }

  const [items, unreadCount] = await Promise.all([
    db.select()
      .from(notifications)
      .where(and(...conditions))
      .orderBy(desc(notifications.createdAt))
      .limit(limit)
      .offset(offset),
    db.select({ count: count() })
      .from(notifications)
      .where(and(
        eq(notifications.userId, userId),
        isNull(notifications.readAt)
      ))
  ]);

  res.json({
    notifications: items,
    unreadCount: unreadCount[0].count,
    hasMore: items.length === limit
  });
});

app.put("/api/notifications/mark-read", authMiddleware, async (req, res) => {
  const { notificationIds = [] } = req.body;
  const userId = req.user.id;

  if (notificationIds.length === 0) {
    // Mark all as read
    await db.update(notifications)
      .set({ readAt: new Date() })
      .where(and(
        eq(notifications.userId, userId),
        isNull(notifications.readAt)
      ));
  } else {
    // Mark specific ones as read
    await db.update(notifications)
      .set({ readAt: new Date() })
      .where(and(
        eq(notifications.userId, userId),
        inArray(notifications.id, notificationIds)
      ));
  }

  res.json({ success: true });
});

// Subscription Management
app.get("/api/subscription/current", authMiddleware, async (req, res) => {
  const subscription = await db.select({
    subscription: userSubscriptions,
    tier: subscriptionTiers
  })
  .from(userSubscriptions)
  .leftJoin(subscriptionTiers, eq(userSubscriptions.tierId, subscriptionTiers.id))
  .where(eq(userSubscriptions.userId, req.user.id))
  .limit(1);

  if (!subscription[0]) {
    // Return free tier by default
    const freeTier = await db.select()
      .from(subscriptionTiers)
      .where(eq(subscriptionTiers.slug, 'free'))
      .limit(1);

    return res.json({
      tier: freeTier[0],
      subscription: null
    });
  }

  res.json({
    tier: subscription[0].tier,
    subscription: subscription[0].subscription
  });
});

app.post("/api/subscription/checkout", authMiddleware, async (req, res) => {
  const { tierId, billingPeriod = 'monthly' } = req.body;

  // Integration with Stripe would go here
  // For now, return a mock checkout URL
  const checkoutUrl = `/checkout?tier=${tierId}&period=${billingPeriod}&user=${req.user.id}`;

  res.json({ checkoutUrl });
});

// Export System
app.post("/api/export", authMiddleware, async (req, res) => {
  const { exportType = 'full', format = 'json' } = req.body;
  const userId = req.user.id;

  // Create export job
  const [job] = await db.insert(exportJobs).values({
    userId,
    exportType,
    format,
    status: 'pending'
  }).returning();

  // Trigger async export process
  processExport(job.id);

  res.json({
    jobId: job.id,
    status: 'pending',
    message: 'Export started. You will be notified when complete.'
  });
});

app.get("/api/export/:jobId/status", authMiddleware, async (req, res) => {
  const job = await db.select()
    .from(exportJobs)
    .where(and(
      eq(exportJobs.id, req.params.jobId),
      eq(exportJobs.userId, req.user.id)
    ))
    .limit(1);

  if (!job[0]) {
    return res.status(404).json({ error: 'Export job not found' });
  }

  res.json(job[0]);
});

// API Key Management
app.post("/api/developer/keys", authMiddleware, async (req, res) => {
  const { name, permissions = ['read'], expiresIn = 90 } = req.body;

  // Generate API key
  const apiKey = `pk_${generateRandomString(32)}`;
  const keyHash = await hashApiKey(apiKey);
  const lastFour = apiKey.slice(-4);

  const expiresAt = new Date();
  expiresAt.setDate(expiresAt.getDate() + expiresIn);

  const [key] = await db.insert(apiKeys).values({
    userId: req.user.id,
    name,
    keyHash,
    lastFour,
    permissions,
    expiresAt
  }).returning();

  res.json({
    id: key.id,
    name: key.name,
    apiKey, // Only shown once
    lastFour,
    permissions,
    expiresAt: key.expiresAt
  });
});

// Activity Feed
app.get("/api/feed", authMiddleware, async (req, res) => {
  const { limit = 20, offset = 0 } = req.query;
  const userId = req.user.id;

  // Get users that current user follows
  const following = await db.select({ followingId: userFollows.followingId })
    .from(userFollows)
    .where(eq(userFollows.followerId, userId));

  const followingIds = following.map(f => f.followingId);
  followingIds.push(userId); // Include own activities

  const activities = await db.select({
    activity: activityFeed,
    actor: users,
    targetPrompt: prompts,
    targetCollection: promptCollections
  })
  .from(activityFeed)
  .leftJoin(users, eq(activityFeed.actorUserId, users.id))
  .leftJoin(prompts, and(
    eq(activityFeed.targetType, 'prompt'),
    eq(activityFeed.targetId, prompts.id)
  ))
  .leftJoin(promptCollections, and(
    eq(activityFeed.targetType, 'collection'),
    eq(activityFeed.targetId, promptCollections.id)
  ))
  .where(inArray(activityFeed.actorUserId, followingIds))
  .orderBy(desc(activityFeed.createdAt))
  .limit(limit)
  .offset(offset);

  res.json({
    activities,
    hasMore: activities.length === limit
  });
});

// Content Moderation
app.post("/api/report", authMiddleware, async (req, res) => {
  const { contentType, contentId, reason, description } = req.body;

  const [report] = await db.insert(contentReports).values({
    reporterUserId: req.user.id,
    contentType,
    contentId,
    reason,
    description
  }).returning();

  // Send notification to moderators
  await notifyModerators(report);

  res.json({
    message: 'Report submitted successfully',
    reportId: report.id
  });
});

// Search with History
app.get("/api/search", authMiddleware, async (req, res) => {
  const { q, type = 'all', limit = 20 } = req.query;
  const userId = req.user.id;

  // Save search to history
  if (q) {
    await db.insert(searchHistory).values({
      userId,
      query: q,
      resultsCount: 0 // Will update after search
    }).onConflictDoNothing();
  }

  // Perform search across different content types
  const results = await performSearch(q, type, limit);

  // Update search history with results count
  if (q) {
    await db.update(searchHistory)
      .set({ resultsCount: results.total })
      .where(and(
        eq(searchHistory.userId, userId),
        eq(searchHistory.query, q)
      ));
  }

  res.json(results);
});

// System Health
app.get("/api/system/health", async (req, res) => {
  const health = await checkSystemHealth();

  res.json({
    status: health.status,
    version: process.env.APP_VERSION || '1.0.0',
    uptime: process.uptime(),
    timestamp: new Date().toISOString(),
    services: health.services
  });
});
```

## REACT COMPONENTS

### 1. Notification System

```tsx
// client/src/components/notifications/NotificationCenter.tsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Bell, Check, Heart, UserPlus, Share2, MessageCircle, AlertCircle } from 'lucide-react';
import * as Popover from '@radix-ui/react-popover';
import { useNotifications } from '../../hooks/useNotifications';

const iconMap = {
  like: Heart,
  follow: UserPlus,
  share: Share2,
  comment: MessageCircle,
  mention: AlertCircle,
  system: Bell
};

export const NotificationCenter: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const { notifications, unreadCount, markAsRead, markAllAsRead } = useNotifications();

  const handleNotificationClick = async (notification: any) => {
    if (!notification.readAt) {
      await markAsRead(notification.id);
    }
    // Navigate to relevant content
    navigateToContent(notification);
  };

  return (
    <Popover.Root open={isOpen} onOpenChange={setIsOpen}>
      <Popover.Trigger asChild>
        <button className="relative p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors">
          <Bell className="w-5 h-5" />
          {unreadCount > 0 && (
            <motion.span
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
            >
              {unreadCount > 99 ? '99+' : unreadCount}
            </motion.span>
          )}
        </button>
      </Popover.Trigger>

      <Popover.Portal>
        <Popover.Content
          className="bg-white dark:bg-gray-900 rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 w-96 max-h-[600px] overflow-hidden z-50"
          sideOffset={5}
        >
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <h3 className="font-semibold text-lg">Notifications</h3>
              {unreadCount > 0 && (
                <button
                  onClick={markAllAsRead}
                  className="text-sm text-blue-600 hover:text-blue-700"
                >
                  Mark all as read
                </button>
              )}
            </div>
          </div>

          <div className="overflow-y-auto max-h-[500px]">
            <AnimatePresence>
              {notifications.length === 0 ? (
                <div className="p-8 text-center text-gray-500">
                  <Bell className="w-12 h-12 mx-auto mb-3 opacity-30" />
                  <p>No notifications yet</p>
                </div>
              ) : (
                notifications.map((notification) => {
                  const Icon = iconMap[notification.type] || Bell;
                  return (
                    <motion.div
                      key={notification.id}
                      initial={{ x: -20, opacity: 0 }}
                      animate={{ x: 0, opacity: 1 }}
                      exit={{ x: 20, opacity: 0 }}
                      onClick={() => handleNotificationClick(notification)}
                      className={`p-4 border-b border-gray-100 dark:border-gray-800 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors ${
                        !notification.readAt ? 'bg-blue-50/50 dark:bg-blue-900/10' : ''
                      }`}
                    >
                      <div className="flex items-start space-x-3">
                        <div className={`p-2 rounded-lg ${
                          notification.type === 'like' ? 'bg-red-100 text-red-600' :
                          notification.type === 'follow' ? 'bg-blue-100 text-blue-600' :
                          notification.type === 'share' ? 'bg-green-100 text-green-600' :
                          'bg-gray-100 text-gray-600'
                        }`}>
                          <Icon className="w-4 h-4" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-gray-900 dark:text-white">
                            {notification.title}
                          </p>
                          {notification.message && (
                            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                              {notification.message}
                            </p>
                          )}
                          <p className="text-xs text-gray-500 mt-1">
                            {formatRelativeTime(notification.createdAt)}
                          </p>
                        </div>
                        {!notification.readAt && (
                          <div className="w-2 h-2 bg-blue-600 rounded-full flex-shrink-0 mt-2" />
                        )}
                      </div>
                    </motion.div>
                  );
                })
              )}
            </AnimatePresence>
          </div>
        </Popover.Content>
      </Popover.Portal>
    </Popover.Root>
  );
};
```

### 2. Subscription & Billing

```tsx
// client/src/components/subscription/SubscriptionManager.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Check, X, Sparkles, Zap, Crown, Building } from 'lucide-react';
import { useSubscription } from '../../hooks/useSubscription';

const tiers = [
  {
    id: 'free',
    name: 'Free',
    icon: Sparkles,
    price: { monthly: 0, yearly: 0 },
    features: [
      '100 prompts',
      '5 collections',
      '10 AI enhancements/month',
      'Basic analytics (7 days)',
      'Community support'
    ],
    limitations: [
      'Ads displayed',
      'PromptLockr watermark',
      'Limited collaboration'
    ]
  },
  {
    id: 'pro',
    name: 'Pro',
    icon: Zap,
    price: { monthly: 9.99, yearly: 99.99 },
    popular: true,
    features: [
      '1,000 prompts',
      '50 collections',
      '100 AI enhancements/month',
      'Advanced analytics (90 days)',
      'No ads or watermark',
      'Priority support'
    ],
    limitations: []
  },
  {
    id: 'team',
    name: 'Team',
    icon: Crown,
    price: { monthly: 29.99, yearly: 299.99 },
    features: [
      '5,000 prompts',
      '200 collections',
      '500 AI enhancements/month',
      'Full analytics (365 days)',
      'Team collaboration',
      'Custom branding',
      'API access',
      'Priority support'
    ],
    limitations: []
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    icon: Building,
    price: { monthly: null, yearly: null },
    features: [
      'Unlimited everything',
      'SSO & SAML',
      'Audit logs',
      'Custom integrations',
      'Dedicated support',
      'SLA guarantee',
      'On-premise option'
    ],
    limitations: []
  }
];

export const SubscriptionManager: React.FC = () => {
  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'yearly'>('monthly');
  const { currentTier, subscribe, cancelSubscription, usage } = useSubscription();

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-4">Choose Your Plan</h2>
        <p className="text-gray-600 dark:text-gray-400 mb-6">
          Unlock advanced features and take your prompt management to the next level
        </p>

        {/* Billing Period Toggle */}
        <div className="inline-flex items-center p-1 bg-gray-100 dark:bg-gray-800 rounded-lg">
          <button
            onClick={() => setBillingPeriod('monthly')}
            className={`px-4 py-2 rounded-md transition-colors ${
              billingPeriod === 'monthly'
                ? 'bg-white dark:bg-gray-700 shadow-sm'
                : 'text-gray-600 dark:text-gray-400'
            }`}
          >
            Monthly
          </button>
          <button
            onClick={() => setBillingPeriod('yearly')}
            className={`px-4 py-2 rounded-md transition-colors ${
              billingPeriod === 'yearly'
                ? 'bg-white dark:bg-gray-700 shadow-sm'
                : 'text-gray-600 dark:text-gray-400'
            }`}
          >
            Yearly
            <span className="ml-2 text-xs text-green-600">Save 17%</span>
          </button>
        </div>
      </div>

      {/* Tier Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {tiers.map((tier) => {
          const Icon = tier.icon;
          const isCurrentTier = currentTier?.id === tier.id;
          const price = tier.price[billingPeriod];

          return (
            <motion.div
              key={tier.id}
              whileHover={{ y: -5 }}
              className={`relative bg-white dark:bg-gray-800 rounded-xl border-2 ${
                tier.popular
                  ? 'border-blue-500 shadow-xl'
                  : 'border-gray-200 dark:border-gray-700'
              } p-6`}
            >
              {tier.popular && (
                <div className="absolute -top-4 left-1/2 -translate-x-1/2 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-bold px-4 py-1 rounded-full">
                  MOST POPULAR
                </div>
              )}

              {isCurrentTier && (
                <div className="absolute -top-4 right-4 bg-green-500 text-white text-xs font-bold px-3 py-1 rounded-full">
                  CURRENT PLAN
                </div>
              )}

              <div className="text-center mb-6">
                <Icon className="w-12 h-12 mx-auto mb-4 text-blue-600" />
                <h3 className="text-xl font-bold mb-2">{tier.name}</h3>
                <div className="text-3xl font-bold">
                  {price !== null ? (
                    <>
                      ${price}
                      <span className="text-sm font-normal text-gray-500">
                        /{billingPeriod === 'monthly' ? 'mo' : 'yr'}
                      </span>
                    </>
                  ) : (
                    <span className="text-2xl">Contact Sales</span>
                  )}
                </div>
              </div>

              <div className="space-y-3 mb-6">
                {tier.features.map((feature, i) => (
                  <div key={i} className="flex items-start">
                    <Check className="w-5 h-5 text-green-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">{feature}</span>
                  </div>
                ))}
                {tier.limitations.map((limitation, i) => (
                  <div key={i} className="flex items-start opacity-60">
                    <X className="w-5 h-5 text-red-500 mr-2 flex-shrink-0" />
                    <span className="text-sm">{limitation}</span>
                  </div>
                ))}
              </div>

              <button
                onClick={() => subscribe(tier.id, billingPeriod)}
                disabled={isCurrentTier}
                className={`w-full py-3 rounded-lg font-medium transition-colors ${
                  isCurrentTier
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : tier.popular
                    ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600'
                    : 'bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                {isCurrentTier ? 'Current Plan' :
                 tier.id === 'enterprise' ? 'Contact Sales' : 'Get Started'}
              </button>
            </motion.div>
          );
        })}
      </div>

      {/* Usage Stats */}
      {currentTier && (
        <div className="mt-12 bg-gray-50 dark:bg-gray-900 rounded-xl p-6">
          <h3 className="text-lg font-semibold mb-4">Current Usage</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <UsageBar
              label="Prompts"
              current={usage.prompts}
              max={currentTier.maxPrompts}
            />
            <UsageBar
              label="Collections"
              current={usage.collections}
              max={currentTier.maxCollections}
            />
            <UsageBar
              label="AI Enhancements"
              current={usage.aiEnhancements}
              max={currentTier.aiEnhancementsMonthly}
              period="This Month"
            />
          </div>
        </div>
      )}
    </div>
  );
};

const UsageBar: React.FC<{
  label: string;
  current: number;
  max: number | null;
  period?: string;
}> = ({ label, current, max, period }) => {
  const percentage = max ? (current / max) * 100 : 0;
  const isNearLimit = max && percentage > 80;

  return (
    <div>
      <div className="flex justify-between mb-2">
        <span className="text-sm font-medium">{label}</span>
        <span className="text-sm text-gray-600">
          {current}{max ? ` / ${max}` : ''} {period && <span className="text-xs">({period})</span>}
        </span>
      </div>
      {max && (
        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${Math.min(percentage, 100)}%` }}
            className={`h-2 rounded-full ${
              isNearLimit
                ? 'bg-gradient-to-r from-orange-500 to-red-500'
                : 'bg-gradient-to-r from-blue-500 to-green-500'
            }`}
          />
        </div>
      )}
    </div>
  );
};
```

### 3. Export & Backup

```tsx
// client/src/components/export/ExportManager.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileJson, FileText, FileCode, Clock, Check, AlertCircle } from 'lucide-react';
import { useExport } from '../../hooks/useExport';

const exportFormats = [
  { id: 'json', name: 'JSON', icon: FileJson, description: 'Machine-readable format' },
  { id: 'csv', name: 'CSV', icon: FileText, description: 'Spreadsheet compatible' },
  { id: 'markdown', name: 'Markdown', icon: FileCode, description: 'Human-readable docs' }
];

export const ExportManager: React.FC = () => {
  const [selectedType, setSelectedType] = useState('full');
  const [selectedFormat, setSelectedFormat] = useState('json');
  const { startExport, jobs, downloadExport } = useExport();

  const handleExport = async () => {
    await startExport(selectedType, selectedFormat);
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
        <h2 className="text-2xl font-bold mb-6">Export Your Data</h2>

        {/* Export Type Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-3">What to export</label>
          <div className="grid grid-cols-3 gap-3">
            {['full', 'prompts', 'collections'].map((type) => (
              <button
                key={type}
                onClick={() => setSelectedType(type)}
                className={`p-3 rounded-lg border transition-all ${
                  selectedType === type
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                }`}
              >
                <div className="font-medium capitalize">{type}</div>
                <div className="text-xs text-gray-500 mt-1">
                  {type === 'full' ? 'Everything' :
                   type === 'prompts' ? 'Prompts only' :
                   'Collections only'}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Format Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-3">Export format</label>
          <div className="grid grid-cols-3 gap-3">
            {exportFormats.map((format) => {
              const Icon = format.icon;
              return (
                <button
                  key={format.id}
                  onClick={() => setSelectedFormat(format.id)}
                  className={`p-3 rounded-lg border transition-all ${
                    selectedFormat === format.id
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="w-5 h-5 mx-auto mb-2" />
                  <div className="font-medium">{format.name}</div>
                  <div className="text-xs text-gray-500 mt-1">{format.description}</div>
                </button>
              );
            })}
          </div>
        </div>

        <button
          onClick={handleExport}
          className="w-full py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-medium hover:from-blue-700 hover:to-purple-700"
        >
          <Download className="w-5 h-5 inline mr-2" />
          Start Export
        </button>

        {/* Recent Exports */}
        {jobs.length > 0 && (
          <div className="mt-8">
            <h3 className="font-semibold mb-4">Recent Exports</h3>
            <div className="space-y-3">
              {jobs.map((job) => (
                <motion.div
                  key={job.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900 rounded-lg"
                >
                  <div className="flex items-center space-x-3">
                    {job.status === 'completed' ? (
                      <Check className="w-5 h-5 text-green-500" />
                    ) : job.status === 'failed' ? (
                      <AlertCircle className="w-5 h-5 text-red-500" />
                    ) : (
                      <Clock className="w-5 h-5 text-yellow-500 animate-spin" />
                    )}
                    <div>
                      <div className="font-medium">
                        {job.exportType} export ({job.format})
                      </div>
                      <div className="text-xs text-gray-500">
                        {formatRelativeTime(job.createdAt)}
                      </div>
                    </div>
                  </div>
                  {job.status === 'completed' && (
                    <button
                      onClick={() => downloadExport(job.id)}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700"
                    >
                      Download
                    </button>
                  )}
                </motion.div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
```

### 4. Developer API

```tsx
// client/src/components/developer/ApiKeyManager.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Key, Copy, Eye, EyeOff, Trash2, Plus } from 'lucide-react';
import { useApiKeys } from '../../hooks/useApiKeys';

export const ApiKeyManager: React.FC = () => {
  const { keys, createKey, revokeKey } = useApiKeys();
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [copiedKeyId, setCopiedKeyId] = useState<string | null>(null);

  const copyToClipboard = async (text: string, keyId: string) => {
    await navigator.clipboard.writeText(text);
    setCopiedKeyId(keyId);
    setTimeout(() => setCopiedKeyId(null), 2000);
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold">API Keys</h2>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Manage your API keys for programmatic access
            </p>
          </div>
          <button
            onClick={() => setShowCreateModal(true)}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            <Plus className="w-4 h-4 inline mr-2" />
            Create Key
          </button>
        </div>

        {/* API Documentation Link */}
        <div className="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <p className="text-sm">
            Learn how to use the PromptLockr API in our{' '}
            <a href="/docs/api" className="text-blue-600 hover:underline">
              developer documentation
            </a>
          </p>
        </div>

        {/* Keys List */}
        <div className="space-y-3">
          {keys.map((key) => (
            <motion.div
              key={key.id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="flex items-center justify-between p-4 border border-gray-200 dark:border-gray-700 rounded-lg"
            >
              <div className="flex items-center space-x-3">
                <Key className="w-5 h-5 text-gray-400" />
                <div>
                  <div className="font-medium">{key.name}</div>
                  <div className="text-sm text-gray-500">
                    pk_...{key.lastFour} •
                    {key.lastUsedAt ? ` Last used ${formatRelativeTime(key.lastUsedAt)}` : ' Never used'}
                  </div>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => copyToClipboard(`pk_...${key.lastFour}`, key.id)}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg"
                >
                  {copiedKeyId === key.id ? (
                    <Check className="w-4 h-4 text-green-500" />
                  ) : (
                    <Copy className="w-4 h-4" />
                  )}
                </button>
                <button
                  onClick={() => revokeKey(key.id)}
                  className="p-2 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg text-red-600"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </motion.div>
          ))}
        </div>

        {/* Empty State */}
        {keys.length === 0 && (
          <div className="text-center py-12">
            <Key className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <p className="text-gray-600 dark:text-gray-400">
              No API keys yet. Create one to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};
```

### 5. Activity Feed

```tsx
// client/src/components/feed/ActivityFeed.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Heart, UserPlus, Share2, Sparkles, Folder, MessageCircle } from 'lucide-react';
import { useActivityFeed } from '../../hooks/useActivityFeed';

const activityIcons = {
  created_prompt: Sparkles,
  liked: Heart,
  followed: UserPlus,
  shared: Share2,
  created_collection: Folder,
  commented: MessageCircle
};

export const ActivityFeed: React.FC = () => {
  const { activities, loadMore, hasMore } = useActivityFeed();

  return (
    <div className="max-w-2xl mx-auto">
      <h2 className="text-xl font-bold mb-6">Activity Feed</h2>

      <div className="space-y-4">
        {activities.map((activity) => {
          const Icon = activityIcons[activity.action] || Sparkles;

          return (
            <motion.div
              key={activity.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700"
            >
              <div className="flex items-start space-x-3">
                <img
                  src={activity.actor.avatarUrl || '/default-avatar.png'}
                  alt={activity.actor.username}
                  className="w-10 h-10 rounded-full"
                />
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <Icon className="w-4 h-4 text-gray-400" />
                    <span className="text-sm">
                      <span className="font-medium">@{activity.actor.username}</span>
                      {' '}
                      {getActivityText(activity)}
                    </span>
                    <span className="text-xs text-gray-500">
                      {formatRelativeTime(activity.createdAt)}
                    </span>
                  </div>

                  {/* Activity Content Preview */}
                  {activity.targetPrompt && (
                    <div className="mt-2 p-3 bg-gray-50 dark:bg-gray-900 rounded-lg">
                      <h4 className="font-medium text-sm mb-1">
                        {activity.targetPrompt.title}
                      </h4>
                      <p className="text-xs text-gray-600 dark:text-gray-400 line-clamp-2">
                        {activity.targetPrompt.content}
                      </p>
                    </div>
                  )}

                  {activity.targetCollection && (
                    <div className="mt-2 p-3 bg-gray-50 dark:bg-gray-900 rounded-lg">
                      <h4 className="font-medium text-sm mb-1">
                        {activity.targetCollection.title}
                      </h4>
                      <p className="text-xs text-gray-600 dark:text-gray-400">
                        {activity.targetCollection.promptCount} prompts
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          );
        })}
      </div>

      {hasMore && (
        <button
          onClick={loadMore}
          className="w-full mt-6 py-3 text-blue-600 hover:text-blue-700 font-medium"
        >
          Load more activities
        </button>
      )}
    </div>
  );
};

function getActivityText(activity: any): string {
  switch (activity.action) {
    case 'created_prompt':
      return 'created a new prompt';
    case 'liked':
      return 'liked a prompt';
    case 'followed':
      return 'started following you';
    case 'shared':
      return 'shared a prompt';
    case 'created_collection':
      return 'created a new collection';
    case 'commented':
      return 'commented on a prompt';
    default:
      return 'performed an action';
  }
}
```

## HELPER FUNCTIONS

```typescript
// shared/notifications.ts
export async function sendNotification(
  userId: string,
  type: string,
  title: string,
  message?: string,
  data?: any
) {
  await db.insert(notifications).values({
    userId,
    type,
    title,
    message,
    data
  });

  // Send push notification if user has enabled them
  await sendPushNotification(userId, { title, body: message });
}

// shared/export.ts
export async function processExport(jobId: string) {
  const job = await db.select().from(exportJobs).where(eq(exportJobs.id, jobId)).limit(1);
  if (!job[0]) return;

  try {
    // Update status to processing
    await db.update(exportJobs)
      .set({ status: 'processing', startedAt: new Date() })
      .where(eq(exportJobs.id, jobId));

    // Gather data based on export type
    const data = await gatherExportData(job[0]);

    // Format data based on format type
    const formatted = formatExportData(data, job[0].format);

    // Upload to cloud storage
    const fileUrl = await uploadExportFile(formatted, job[0]);

    // Update job with completion
    await db.update(exportJobs)
      .set({
        status: 'completed',
        fileUrl,
        fileSize: formatted.length,
        completedAt: new Date(),
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days
      })
      .where(eq(exportJobs.id, jobId));

    // Send notification
    await sendNotification(
      job[0].userId,
      'system',
      'Export Complete',
      'Your data export is ready to download',
      { jobId }
    );
  } catch (error) {
    await db.update(exportJobs)
      .set({
        status: 'failed',
        errorMessage: error.message,
        completedAt: new Date()
      })
      .where(eq(exportJobs.id, jobId));
  }
}

// shared/moderation.ts
export async function notifyModerators(report: any) {
  const moderators = await db.select()
    .from(users)
    .where(eq(users.isModerator, true));

  for (const mod of moderators) {
    await sendNotification(
      mod.id,
      'system',
      'New Content Report',
      `A ${report.contentType} has been reported for ${report.reason}`,
      { reportId: report.id }
    );
  }
}

// shared/health.ts
export async function checkSystemHealth() {
  const checks = {
    database: await checkDatabase(),
    storage: await checkStorage(),
    cache: await checkCache(),
    api: await checkApiHealth()
  };

  const status = Object.values(checks).every(c => c.status === 'healthy')
    ? 'healthy'
    : Object.values(checks).some(c => c.status === 'unhealthy')
    ? 'unhealthy'
    : 'degraded';

  // Log metrics
  await db.insert(systemMetrics).values([
    { metricName: 'health_check', value: status === 'healthy' ? 1 : 0 },
    { metricName: 'response_time', value: checks.api.responseTime, unit: 'ms' },
    { metricName: 'memory_usage', value: process.memoryUsage().heapUsed / 1024 / 1024, unit: 'MB' }
  ]);

  return { status, services: checks };
}

// shared/utils.ts
export function formatRelativeTime(date: string | Date): string {
  const now = new Date();
  const then = new Date(date);
  const seconds = Math.floor((now.getTime() - then.getTime()) / 1000);

  if (seconds < 60) return 'just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;
  return then.toLocaleDateString();
}

export function generateRandomString(length: number): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

export async function hashApiKey(key: string): Promise<string> {
  const encoder = new TextEncoder();
  const data = encoder.encode(key);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}
```

## SERVICE WORKER

```javascript
// client/public/sw.js
const CACHE_NAME = 'promptlockr-v2';
const urlsToCache = [
  '/',
  '/dashboard',
  '/explore',
  '/manifest.json',
  '/offline.html'
];

// Install service worker
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
  );
});

// Cache and network strategy
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request).then(response => {
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }
          const responseToCache = response.clone();
          caches.open(CACHE_NAME)
            .then(cache => {
              cache.put(event.request, responseToCache);
            });
          return response;
        });
      })
      .catch(() => {
        if (event.request.destination === 'document') {
          return caches.match('/offline.html');
        }
      })
  );
});

// Push notifications
self.addEventListener('push', event => {
  const data = event.data.json();
  const options = {
    body: data.body,
    icon: '/icon-192.png',
    badge: '/badge.png',
    vibrate: [200, 100, 200],
    data: data.data
  };
  event.waitUntil(
    self.registration.showNotification(data.title, options)
  );
});

self.addEventListener('notificationclick', event => {
  event.notification.close();
  event.waitUntil(
    clients.openWindow(event.notification.data.url || '/')
  );
});
```

## IMPLEMENTATION STEPS

1. **Notification System**
   - Create notifications table and API
   - Build notification center component
   - Implement push notifications

2. **Subscription & Monetization**
   - Set up subscription tiers
   - Integrate Stripe payment processing
   - Build subscription management UI

3. **Export & Backup**
   - Implement export job processing
   - Create export UI components
   - Set up cloud storage for exports

4. **Developer API**
   - Create API key management system
   - Build developer dashboard
   - Document API endpoints

5. **Activity Feed**
   - Implement activity tracking
   - Build feed component
   - Add real-time updates

6. **Production Hardening**
   - Add comprehensive error handling
   - Implement rate limiting
   - Set up monitoring and logging
   - Add security headers

## TESTING CHECKLIST

- [ ] Notifications display correctly
- [ ] Push notifications work on mobile
- [ ] Subscription upgrade/downgrade works
- [ ] Payment processing succeeds
- [ ] Export generates correct files
- [ ] API keys authenticate properly
- [ ] Activity feed updates in real-time
- [ ] Service worker caches properly
- [ ] Offline mode works
- [ ] All features work on mobile

## PRODUCTION READINESS

- [ ] SSL certificates configured
- [ ] Environment variables secured
- [ ] Database backups scheduled
- [ ] Error monitoring active
- [ ] Analytics tracking enabled
- [ ] Rate limiting configured
- [ ] CORS policies set
- [ ] Security headers added
- [ ] Performance optimized
- [ ] SEO meta tags added

## SUCCESS CRITERIA

Phase 4 is complete when:
- Production-ready notification system deployed
- Monetization foundation established
- Export system fully functional
- Developer API documented and working
- Activity feed shows real-time updates
- PWA installable on all devices
- System monitoring active
- All security measures in place
- Performance metrics meet targets
- User satisfaction increased

This final phase completes Epic 6, transforming PromptLockr into a production-ready, monetizable platform with enterprise-grade features and reliability.