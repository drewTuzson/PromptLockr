## CRITICAL: Templates Page Still Broken - Complete Separation Required

**THE TEMPLATES PAGE IS NOT FIXED.** The current implementation is fundamentally broken in two ways:

1. **The templates page shows "All Prompts" header and prompts content ABOVE the templates section** - This means Templates and Prompts components are being rendered together
2. **Created templates do not appear anywhere in the application** - Templates are not being saved or fetched correctly

Looking at the actual page, I see:
- "All Prompts" header at the top
- "No prompts found" empty state
- THEN below that, "No templates found" empty state
- This is completely wrong - the Templates page should ONLY show templates content

**Technical Context:**
- Frontend: React 18.3.1 + TypeScript + Vite
- Routing: Wouter
- Database: PostgreSQL with Drizzle ORM
- The issue is likely in component structure, routing, or layout nesting

## CRITICAL ISSUE 1: Templates Page Shows Prompts Content

**DIAGNOSIS STEPS - RUN THESE FIRST:**

```javascript
// 1. Find the Templates component file
// Look for files like: Templates.tsx, TemplatesPage.tsx, or similar
// Check the component structure

// 2. Search for where "All Prompts" text appears in the codebase
// This will show which component is rendering it

// 3. Check if Templates component is:
// - Extending/inheriting from Prompts component
// - Being wrapped by the same layout as Prompts
// - Being rendered inside a shared parent that includes prompts header
```

**THE PROBLEM:** 
The Templates page is either:
1. Nested inside a layout that includes the Prompts header
2. Extending/importing the Prompts component
3. Sharing a parent component that renders both

**REQUIRED FIX - Complete Component Separation:**

```tsx
// Templates.tsx or TemplatesPage.tsx - MUST be completely independent
// DO NOT import or extend anything from Prompts component

import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Plus, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
// DO NOT IMPORT ANYTHING FROM PROMPTS

export const TemplatesPage = () => {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);

  // Templates-specific query
  const { data: templates = [], isLoading, error, refetch } = useQuery({
    queryKey: ['templates'],
    queryFn: async () => {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Not authenticated');
      
      const response = await fetch('/api/templates', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        console.error('Templates fetch failed:', response.status);
        throw new Error('Failed to fetch templates');
      }
      
      const data = await response.json();
      console.log('Templates fetched:', data);
      return data;
    },
    refetchOnMount: true,
    refetchOnWindowFocus: true
  });

  // CRITICAL: This component should ONLY render templates content
  // NO prompts header, NO prompts content, NOTHING from prompts
  
  return (
    <div className="flex-1 p-6">
      {/* ONLY Templates Header - No "All Prompts" text anywhere */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold">Templates</h1>
          <p className="text-gray-500">Create and manage reusable prompt templates</p>
        </div>
        <Button onClick={() => setIsCreateModalOpen(true)}>
          <Plus className="w-4 h-4 mr-2" />
          New Template
        </Button>
      </div>

      {/* ONLY Templates Content */}
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
        </div>
      ) : templates.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {templates.map((template) => (
            <div key={template.id} className="border rounded-lg p-4">
              <h3 className="font-semibold mb-2">{template.title}</h3>
              <p className="text-sm text-gray-600 mb-4">{template.description}</p>
              <div className="flex justify-between items-center">
                <span className="text-xs text-gray-500">
                  {template.usageCount || 0} uses
                </span>
                <Button size="sm" variant="outline">Use Template</Button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center h-64">
          <FileText className="w-16 h-16 text-gray-400 mb-4" />
          <h2 className="text-xl font-semibold mb-2">No templates found</h2>
          <p className="text-gray-500 mb-4">Create your first template to get started</p>
          <Button onClick={() => setIsCreateModalOpen(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Create Your First Template
          </Button>
        </div>
      )}

      {/* Create Modal */}
      {isCreateModalOpen && (
        <CreateTemplateModal
          open={isCreateModalOpen}
          onClose={() => {
            setIsCreateModalOpen(false);
            refetch(); // Refresh templates after close
          }}
        />
      )}
    </div>
  );
};
```

**CHECK THE ROUTING:**

```tsx
// In App.tsx or wherever routes are defined
// Make sure Templates has its own independent route

import { Route, Switch } from 'wouter';
import { Layout } from './components/Layout';
import { PromptsPage } from './pages/Prompts';
import { TemplatesPage } from './pages/Templates';

// WRONG - If you have this structure where both use same layout:
<Layout>
  <Switch>
    <Route path="/prompts" component={PromptsPage} />
    <Route path="/templates" component={TemplatesPage} />
  </Switch>
</Layout>

// The Layout might be adding the "All Prompts" header
// Check what Layout component is rendering

// CORRECT - Each page manages its own complete layout:
<Switch>
  <Route path="/prompts">
    <Layout>
      <PromptsPage />
    </Layout>
  </Route>
  <Route path="/templates">
    <Layout showPromptsHeader={false}> {/* Or separate layout */}
      <TemplatesPage />
    </Layout>
  </Route>
</Switch>

// OR use completely separate layouts:
<Switch>
  <Route path="/prompts" component={PromptsWithLayout} />
  <Route path="/templates" component={TemplatesWithLayout} />
</Switch>
```

## CRITICAL ISSUE 2: Templates Not Being Created/Displayed

**BACKEND VERIFICATION - Check these files:**

```typescript
// server/routes.ts or server/index.ts
// VERIFY these endpoints exist and work:

// 1. GET /api/templates - MUST EXIST
app.get('/api/templates', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    console.log('Fetching templates for user:', userId);
    
    // Check if templates table exists
    const templates = await db.select()
      .from(templates)
      .where(eq(templates.userId, userId))
      .orderBy(desc(templates.createdAt));
    
    console.log('Found templates:', templates);
    res.json(templates || []);
  } catch (error) {
    console.error('Templates fetch error:', error);
    res.status(500).json({ error: error.message });
  }
});

// 2. POST /api/templates - MUST EXIST
app.post('/api/templates', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { title, content, description } = req.body;
    
    console.log('Creating template:', { userId, title });
    
    const [newTemplate] = await db.insert(templates).values({
      id: crypto.randomUUID(),
      userId,
      title: title || 'Untitled',
      content: content || '',
      description: description || '',
      variables: [],
      createdAt: new Date(),
      updatedAt: new Date()
    }).returning();
    
    console.log('Created template:', newTemplate);
    res.status(201).json(newTemplate);
  } catch (error) {
    console.error('Template creation error:', error);
    res.status(500).json({ error: error.message });
  }
});
```

**DATABASE SCHEMA - VERIFY THIS EXISTS:**

```typescript
// In shared/schema.ts or db/schema.ts
// The templates table MUST be defined

export const templates = pgTable('templates', {
  id: uuid('id').primaryKey().defaultRandom(),
  userId: uuid('user_id').references(() => users.id).notNull(),
  title: varchar('title', { length: 255 }).notNull(),
  content: text('content').notNull(),
  description: text('description'),
  category: varchar('category', { length: 100 }),
  variables: jsonb('variables').default([]),
  usageCount: integer('usage_count').default(0),
  isPublic: boolean('is_public').default(false),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
});
```

**RUN THIS DATABASE MIGRATION:**

```sql
-- Run this SQL directly in your database
CREATE TABLE IF NOT EXISTS templates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) NOT NULL,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  description TEXT,
  category VARCHAR(100),
  variables JSONB DEFAULT '[]',
  usage_count INTEGER DEFAULT 0,
  is_public BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

**CREATE TEMPLATE MODAL FIX:**

```tsx
// CreateTemplateModal.tsx
import { useState } from 'react';
import { toast } from 'sonner';

export const CreateTemplateModal = ({ open, onClose }) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [description, setDescription] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title || !content) {
      toast.error('Title and content are required');
      return;
    }

    setIsSubmitting(true);
    console.log('Submitting template:', { title, content });

    try {
      const response = await fetch('/api/templates', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ title, content, description })
      });

      console.log('Response status:', response.status);
      const data = await response.json();
      console.log('Response data:', data);

      if (!response.ok) {
        throw new Error(data.error || 'Failed to create template');
      }

      toast.success('Template created successfully!');
      
      // Clear form
      setTitle('');
      setContent('');
      setDescription('');
      
      // Close modal and trigger refresh
      onClose();
      
    } catch (error) {
      console.error('Template creation failed:', error);
      toast.error(`Failed to create template: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!open) return null;

  return (
    // Modal implementation with form
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-white rounded-lg p-6 w-full max-w-lg">
        <h2 className="text-xl font-bold mb-4">Create Template</h2>
        <form onSubmit={handleSubmit}>
          {/* Form fields */}
        </form>
      </div>
    </div>
  );
};
```

## DEBUGGING COMMANDS TO RUN:

```javascript
// Run these in browser console:

// 1. Check if templates endpoint exists
fetch('/api/templates', {
  headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
}).then(r => {
  console.log('Templates endpoint status:', r.status);
  return r.json();
}).then(data => console.log('Templates data:', data));

// 2. Try creating a template directly
fetch('/api/templates', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${localStorage.getItem('token')}`
  },
  body: JSON.stringify({
    title: 'Test Template',
    content: 'Test content',
    description: 'Test description'
  })
}).then(r => r.json()).then(console.log);

// 3. Check current route
console.log('Current path:', window.location.pathname);

// 4. Check if Templates component is mounted
console.log('Page title:', document.querySelector('h1')?.textContent);
```

## VERIFICATION:

After fixing, the Templates page should:
1. **NOT show "All Prompts" anywhere**
2. **ONLY show "Templates" as the page title**
3. **Display created templates immediately**
4. **Never show prompts-related content**

**IF THIS DOESN'T WORK:** 
The issue is likely that the entire app structure needs refactoring to properly separate Templates from Prompts. Look for shared layouts, parent components, or routing wrappers that are forcing both components to render together.